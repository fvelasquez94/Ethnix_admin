"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pretty-bytes";
exports.ids = ["vendor-chunks/pretty-bytes"];
exports.modules = {

/***/ "(ssr)/./node_modules/pretty-bytes/index.js":
/*!********************************************!*\
  !*** ./node_modules/pretty-bytes/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ prettyBytes)\n/* harmony export */ });\nconst BYTE_UNITS = [\n    \"B\",\n    \"kB\",\n    \"MB\",\n    \"GB\",\n    \"TB\",\n    \"PB\",\n    \"EB\",\n    \"ZB\",\n    \"YB\"\n];\nconst BIBYTE_UNITS = [\n    \"B\",\n    \"KiB\",\n    \"MiB\",\n    \"GiB\",\n    \"TiB\",\n    \"PiB\",\n    \"EiB\",\n    \"ZiB\",\n    \"YiB\"\n];\nconst BIT_UNITS = [\n    \"b\",\n    \"kbit\",\n    \"Mbit\",\n    \"Gbit\",\n    \"Tbit\",\n    \"Pbit\",\n    \"Ebit\",\n    \"Zbit\",\n    \"Ybit\"\n];\nconst BIBIT_UNITS = [\n    \"b\",\n    \"kibit\",\n    \"Mibit\",\n    \"Gibit\",\n    \"Tibit\",\n    \"Pibit\",\n    \"Eibit\",\n    \"Zibit\",\n    \"Yibit\"\n];\n/*\nFormats the given number using `Number#toLocaleString`.\n- If locale is a string, the value is expected to be a locale-key (for example: `de`).\n- If locale is true, the system default locale is used for translation.\n- If no value for locale is specified, the number is returned unmodified.\n*/ const toLocaleString = (number, locale, options)=>{\n    let result = number;\n    if (typeof locale === \"string\" || Array.isArray(locale)) {\n        result = number.toLocaleString(locale, options);\n    } else if (locale === true || options !== undefined) {\n        result = number.toLocaleString(undefined, options);\n    }\n    return result;\n};\nfunction prettyBytes(number, options) {\n    if (!Number.isFinite(number)) {\n        throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);\n    }\n    options = {\n        bits: false,\n        binary: false,\n        space: true,\n        ...options\n    };\n    const UNITS = options.bits ? options.binary ? BIBIT_UNITS : BIT_UNITS : options.binary ? BIBYTE_UNITS : BYTE_UNITS;\n    const separator = options.space ? \" \" : \"\";\n    if (options.signed && number === 0) {\n        return ` 0${separator}${UNITS[0]}`;\n    }\n    const isNegative = number < 0;\n    const prefix = isNegative ? \"-\" : options.signed ? \"+\" : \"\";\n    if (isNegative) {\n        number = -number;\n    }\n    let localeOptions;\n    if (options.minimumFractionDigits !== undefined) {\n        localeOptions = {\n            minimumFractionDigits: options.minimumFractionDigits\n        };\n    }\n    if (options.maximumFractionDigits !== undefined) {\n        localeOptions = {\n            maximumFractionDigits: options.maximumFractionDigits,\n            ...localeOptions\n        };\n    }\n    if (number < 1) {\n        const numberString = toLocaleString(number, options.locale, localeOptions);\n        return prefix + numberString + separator + UNITS[0];\n    }\n    const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);\n    number /= (options.binary ? 1024 : 1000) ** exponent;\n    if (!localeOptions) {\n        number = number.toPrecision(3);\n    }\n    const numberString = toLocaleString(Number(number), options.locale, localeOptions);\n    const unit = UNITS[exponent];\n    return prefix + numberString + separator + unit;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJldHR5LWJ5dGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxhQUFhO0lBQ2xCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNBO0FBRUQsTUFBTUMsZUFBZTtJQUNwQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDQTtBQUVELE1BQU1DLFlBQVk7SUFDakI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0E7QUFFRCxNQUFNQyxjQUFjO0lBQ25CO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNBO0FBRUQ7Ozs7O0FBS0EsR0FDQSxNQUFNQyxpQkFBaUIsQ0FBQ0MsUUFBUUMsUUFBUUM7SUFDdkMsSUFBSUMsU0FBU0g7SUFDYixJQUFJLE9BQU9DLFdBQVcsWUFBWUcsTUFBTUMsT0FBTyxDQUFDSixTQUFTO1FBQ3hERSxTQUFTSCxPQUFPRCxjQUFjLENBQUNFLFFBQVFDO0lBQ3hDLE9BQU8sSUFBSUQsV0FBVyxRQUFRQyxZQUFZSSxXQUFXO1FBQ3BESCxTQUFTSCxPQUFPRCxjQUFjLENBQUNPLFdBQVdKO0lBQzNDO0lBRUEsT0FBT0M7QUFDUjtBQUVlLFNBQVNJLFlBQVlQLE1BQU0sRUFBRUUsT0FBTztJQUNsRCxJQUFJLENBQUNNLE9BQU9DLFFBQVEsQ0FBQ1QsU0FBUztRQUM3QixNQUFNLElBQUlVLFVBQVUsQ0FBQyw4QkFBOEIsRUFBRSxPQUFPVixPQUFPLEVBQUUsRUFBRUEsT0FBTyxDQUFDO0lBQ2hGO0lBRUFFLFVBQVU7UUFDVFMsTUFBTTtRQUNOQyxRQUFRO1FBQ1JDLE9BQU87UUFDUCxHQUFHWCxPQUFPO0lBQ1g7SUFFQSxNQUFNWSxRQUFRWixRQUFRUyxJQUFJLEdBQ3RCVCxRQUFRVSxNQUFNLEdBQUdkLGNBQWNELFlBQy9CSyxRQUFRVSxNQUFNLEdBQUdoQixlQUFlRDtJQUVwQyxNQUFNb0IsWUFBWWIsUUFBUVcsS0FBSyxHQUFHLE1BQU07SUFFeEMsSUFBSVgsUUFBUWMsTUFBTSxJQUFJaEIsV0FBVyxHQUFHO1FBQ25DLE9BQU8sQ0FBQyxFQUFFLEVBQUVlLFVBQVUsRUFBRUQsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25DO0lBRUEsTUFBTUcsYUFBYWpCLFNBQVM7SUFDNUIsTUFBTWtCLFNBQVNELGFBQWEsTUFBT2YsUUFBUWMsTUFBTSxHQUFHLE1BQU07SUFFMUQsSUFBSUMsWUFBWTtRQUNmakIsU0FBUyxDQUFDQTtJQUNYO0lBRUEsSUFBSW1CO0lBRUosSUFBSWpCLFFBQVFrQixxQkFBcUIsS0FBS2QsV0FBVztRQUNoRGEsZ0JBQWdCO1lBQUNDLHVCQUF1QmxCLFFBQVFrQixxQkFBcUI7UUFBQTtJQUN0RTtJQUVBLElBQUlsQixRQUFRbUIscUJBQXFCLEtBQUtmLFdBQVc7UUFDaERhLGdCQUFnQjtZQUFDRSx1QkFBdUJuQixRQUFRbUIscUJBQXFCO1lBQUUsR0FBR0YsYUFBYTtRQUFBO0lBQ3hGO0lBRUEsSUFBSW5CLFNBQVMsR0FBRztRQUNmLE1BQU1zQixlQUFldkIsZUFBZUMsUUFBUUUsUUFBUUQsTUFBTSxFQUFFa0I7UUFDNUQsT0FBT0QsU0FBU0ksZUFBZVAsWUFBWUQsS0FBSyxDQUFDLEVBQUU7SUFDcEQ7SUFFQSxNQUFNUyxXQUFXQyxLQUFLQyxHQUFHLENBQUNELEtBQUtFLEtBQUssQ0FBQ3hCLFFBQVFVLE1BQU0sR0FBR1ksS0FBS0csR0FBRyxDQUFDM0IsVUFBVXdCLEtBQUtHLEdBQUcsQ0FBQyxRQUFRSCxLQUFLSSxLQUFLLENBQUM1QixVQUFVLElBQUljLE1BQU1lLE1BQU0sR0FBRztJQUNsSTdCLFVBQVUsQ0FBQ0UsUUFBUVUsTUFBTSxHQUFHLE9BQU8sSUFBRyxLQUFNVztJQUU1QyxJQUFJLENBQUNKLGVBQWU7UUFDbkJuQixTQUFTQSxPQUFPOEIsV0FBVyxDQUFDO0lBQzdCO0lBRUEsTUFBTVIsZUFBZXZCLGVBQWVTLE9BQU9SLFNBQVNFLFFBQVFELE1BQU0sRUFBRWtCO0lBRXBFLE1BQU1ZLE9BQU9qQixLQUFLLENBQUNTLFNBQVM7SUFFNUIsT0FBT0wsU0FBU0ksZUFBZVAsWUFBWWdCO0FBQzVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXNvbW9ycGhpYy8uL25vZGVfbW9kdWxlcy9wcmV0dHktYnl0ZXMvaW5kZXguanM/MmZiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBCWVRFX1VOSVRTID0gW1xuXHQnQicsXG5cdCdrQicsXG5cdCdNQicsXG5cdCdHQicsXG5cdCdUQicsXG5cdCdQQicsXG5cdCdFQicsXG5cdCdaQicsXG5cdCdZQicsXG5dO1xuXG5jb25zdCBCSUJZVEVfVU5JVFMgPSBbXG5cdCdCJyxcblx0J0tpQicsXG5cdCdNaUInLFxuXHQnR2lCJyxcblx0J1RpQicsXG5cdCdQaUInLFxuXHQnRWlCJyxcblx0J1ppQicsXG5cdCdZaUInLFxuXTtcblxuY29uc3QgQklUX1VOSVRTID0gW1xuXHQnYicsXG5cdCdrYml0Jyxcblx0J01iaXQnLFxuXHQnR2JpdCcsXG5cdCdUYml0Jyxcblx0J1BiaXQnLFxuXHQnRWJpdCcsXG5cdCdaYml0Jyxcblx0J1liaXQnLFxuXTtcblxuY29uc3QgQklCSVRfVU5JVFMgPSBbXG5cdCdiJyxcblx0J2tpYml0Jyxcblx0J01pYml0Jyxcblx0J0dpYml0Jyxcblx0J1RpYml0Jyxcblx0J1BpYml0Jyxcblx0J0VpYml0Jyxcblx0J1ppYml0Jyxcblx0J1lpYml0Jyxcbl07XG5cbi8qXG5Gb3JtYXRzIHRoZSBnaXZlbiBudW1iZXIgdXNpbmcgYE51bWJlciN0b0xvY2FsZVN0cmluZ2AuXG4tIElmIGxvY2FsZSBpcyBhIHN0cmluZywgdGhlIHZhbHVlIGlzIGV4cGVjdGVkIHRvIGJlIGEgbG9jYWxlLWtleSAoZm9yIGV4YW1wbGU6IGBkZWApLlxuLSBJZiBsb2NhbGUgaXMgdHJ1ZSwgdGhlIHN5c3RlbSBkZWZhdWx0IGxvY2FsZSBpcyB1c2VkIGZvciB0cmFuc2xhdGlvbi5cbi0gSWYgbm8gdmFsdWUgZm9yIGxvY2FsZSBpcyBzcGVjaWZpZWQsIHRoZSBudW1iZXIgaXMgcmV0dXJuZWQgdW5tb2RpZmllZC5cbiovXG5jb25zdCB0b0xvY2FsZVN0cmluZyA9IChudW1iZXIsIGxvY2FsZSwgb3B0aW9ucykgPT4ge1xuXHRsZXQgcmVzdWx0ID0gbnVtYmVyO1xuXHRpZiAodHlwZW9mIGxvY2FsZSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShsb2NhbGUpKSB7XG5cdFx0cmVzdWx0ID0gbnVtYmVyLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwgb3B0aW9ucyk7XG5cdH0gZWxzZSBpZiAobG9jYWxlID09PSB0cnVlIHx8IG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJlc3VsdCA9IG51bWJlci50b0xvY2FsZVN0cmluZyh1bmRlZmluZWQsIG9wdGlvbnMpO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXR0eUJ5dGVzKG51bWJlciwgb3B0aW9ucykge1xuXHRpZiAoIU51bWJlci5pc0Zpbml0ZShudW1iZXIpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgYSBmaW5pdGUgbnVtYmVyLCBnb3QgJHt0eXBlb2YgbnVtYmVyfTogJHtudW1iZXJ9YCk7XG5cdH1cblxuXHRvcHRpb25zID0ge1xuXHRcdGJpdHM6IGZhbHNlLFxuXHRcdGJpbmFyeTogZmFsc2UsXG5cdFx0c3BhY2U6IHRydWUsXG5cdFx0Li4ub3B0aW9ucyxcblx0fTtcblxuXHRjb25zdCBVTklUUyA9IG9wdGlvbnMuYml0c1xuXHRcdD8gKG9wdGlvbnMuYmluYXJ5ID8gQklCSVRfVU5JVFMgOiBCSVRfVU5JVFMpXG5cdFx0OiAob3B0aW9ucy5iaW5hcnkgPyBCSUJZVEVfVU5JVFMgOiBCWVRFX1VOSVRTKTtcblxuXHRjb25zdCBzZXBhcmF0b3IgPSBvcHRpb25zLnNwYWNlID8gJyAnIDogJyc7XG5cblx0aWYgKG9wdGlvbnMuc2lnbmVkICYmIG51bWJlciA9PT0gMCkge1xuXHRcdHJldHVybiBgIDAke3NlcGFyYXRvcn0ke1VOSVRTWzBdfWA7XG5cdH1cblxuXHRjb25zdCBpc05lZ2F0aXZlID0gbnVtYmVyIDwgMDtcblx0Y29uc3QgcHJlZml4ID0gaXNOZWdhdGl2ZSA/ICctJyA6IChvcHRpb25zLnNpZ25lZCA/ICcrJyA6ICcnKTtcblxuXHRpZiAoaXNOZWdhdGl2ZSkge1xuXHRcdG51bWJlciA9IC1udW1iZXI7XG5cdH1cblxuXHRsZXQgbG9jYWxlT3B0aW9ucztcblxuXHRpZiAob3B0aW9ucy5taW5pbXVtRnJhY3Rpb25EaWdpdHMgIT09IHVuZGVmaW5lZCkge1xuXHRcdGxvY2FsZU9wdGlvbnMgPSB7bWluaW11bUZyYWN0aW9uRGlnaXRzOiBvcHRpb25zLm1pbmltdW1GcmFjdGlvbkRpZ2l0c307XG5cdH1cblxuXHRpZiAob3B0aW9ucy5tYXhpbXVtRnJhY3Rpb25EaWdpdHMgIT09IHVuZGVmaW5lZCkge1xuXHRcdGxvY2FsZU9wdGlvbnMgPSB7bWF4aW11bUZyYWN0aW9uRGlnaXRzOiBvcHRpb25zLm1heGltdW1GcmFjdGlvbkRpZ2l0cywgLi4ubG9jYWxlT3B0aW9uc307XG5cdH1cblxuXHRpZiAobnVtYmVyIDwgMSkge1xuXHRcdGNvbnN0IG51bWJlclN0cmluZyA9IHRvTG9jYWxlU3RyaW5nKG51bWJlciwgb3B0aW9ucy5sb2NhbGUsIGxvY2FsZU9wdGlvbnMpO1xuXHRcdHJldHVybiBwcmVmaXggKyBudW1iZXJTdHJpbmcgKyBzZXBhcmF0b3IgKyBVTklUU1swXTtcblx0fVxuXG5cdGNvbnN0IGV4cG9uZW50ID0gTWF0aC5taW4oTWF0aC5mbG9vcihvcHRpb25zLmJpbmFyeSA/IE1hdGgubG9nKG51bWJlcikgLyBNYXRoLmxvZygxMDI0KSA6IE1hdGgubG9nMTAobnVtYmVyKSAvIDMpLCBVTklUUy5sZW5ndGggLSAxKTtcblx0bnVtYmVyIC89IChvcHRpb25zLmJpbmFyeSA/IDEwMjQgOiAxMDAwKSAqKiBleHBvbmVudDtcblxuXHRpZiAoIWxvY2FsZU9wdGlvbnMpIHtcblx0XHRudW1iZXIgPSBudW1iZXIudG9QcmVjaXNpb24oMyk7XG5cdH1cblxuXHRjb25zdCBudW1iZXJTdHJpbmcgPSB0b0xvY2FsZVN0cmluZyhOdW1iZXIobnVtYmVyKSwgb3B0aW9ucy5sb2NhbGUsIGxvY2FsZU9wdGlvbnMpO1xuXG5cdGNvbnN0IHVuaXQgPSBVTklUU1tleHBvbmVudF07XG5cblx0cmV0dXJuIHByZWZpeCArIG51bWJlclN0cmluZyArIHNlcGFyYXRvciArIHVuaXQ7XG59XG4iXSwibmFtZXMiOlsiQllURV9VTklUUyIsIkJJQllURV9VTklUUyIsIkJJVF9VTklUUyIsIkJJQklUX1VOSVRTIiwidG9Mb2NhbGVTdHJpbmciLCJudW1iZXIiLCJsb2NhbGUiLCJvcHRpb25zIiwicmVzdWx0IiwiQXJyYXkiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwicHJldHR5Qnl0ZXMiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsIlR5cGVFcnJvciIsImJpdHMiLCJiaW5hcnkiLCJzcGFjZSIsIlVOSVRTIiwic2VwYXJhdG9yIiwic2lnbmVkIiwiaXNOZWdhdGl2ZSIsInByZWZpeCIsImxvY2FsZU9wdGlvbnMiLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJudW1iZXJTdHJpbmciLCJleHBvbmVudCIsIk1hdGgiLCJtaW4iLCJmbG9vciIsImxvZyIsImxvZzEwIiwibGVuZ3RoIiwidG9QcmVjaXNpb24iLCJ1bml0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pretty-bytes/index.js\n");

/***/ })

};
;