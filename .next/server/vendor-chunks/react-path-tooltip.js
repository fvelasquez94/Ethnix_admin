"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-path-tooltip";
exports.ids = ["vendor-chunks/react-path-tooltip"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-path-tooltip/dist/ReactPathTooltip.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-path-tooltip/dist/ReactPathTooltip.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PathTooltip = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nconst react_1 = tslib_1.__importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nexports.PathTooltip = (props)=>{\n    const [hidden, setHidden] = react_1.useState(true);\n    const [tooltipRect, setTooltipRect] = react_1.useState({\n        x: 0,\n        y: 0,\n        w: 0,\n        h: 0,\n        isLeft: false,\n        isTop: false\n    });\n    const [fontSize] = react_1.useState(props[\"fontSize\"] || 12);\n    const [fontFamily] = react_1.useState(props[\"fontFamily\"] || \"sans-serif\");\n    const [bgColor] = react_1.useState(props[\"bgColor\"] || \"black\");\n    const [textColor] = react_1.useState(props[\"textColor\"] || \"white\");\n    const [rtl] = react_1.useState(props[\"rtl\"] || false);\n    const pathRef = props.pathRef;\n    const svgRef = props.svgRef;\n    const textRef = react_1.createRef();\n    react_1.useEffect(()=>{\n        const updateTooltip = (e)=>{\n            if (svgRef && pathRef && textRef && svgRef.current && pathRef.current && textRef.current) {\n                const svgRect = svgRef.current.getBoundingClientRect();\n                const textRect = textRef.current.getBoundingClientRect();\n                const isLeft = e.x - svgRect.x > svgRect.width / 2;\n                const isTop = e.y - svgRect.y > svgRect.height / 2;\n                const w = textRect.width + 20;\n                const h = textRect.height + 20;\n                const x = isLeft ? e.x - svgRect.x + 8 - w : e.x - svgRect.x - 8;\n                const y = isTop ? e.y - svgRect.y - 12 - h : e.y - svgRect.y + 8;\n                setTooltipRect({\n                    x: x,\n                    y: y,\n                    w: w,\n                    h: h,\n                    isLeft: isLeft,\n                    isTop: isTop\n                });\n            }\n        };\n        if (pathRef && pathRef.current) {\n            pathRef.current.addEventListener(\"mouseover\", ()=>{\n                setHidden(false);\n            });\n            pathRef.current.addEventListener(\"mouseleave\", ()=>{\n                setHidden(true);\n            });\n            pathRef.current.addEventListener(\"mousemove\", (e)=>{\n                if (!hidden) updateTooltip(e);\n            });\n        }\n    }, [\n        pathRef,\n        svgRef,\n        textRef,\n        hidden\n    ]);\n    const bottomRight = (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y - 10).toString() + \" \" + (tooltipRect.x + 30).toString() + \",\" + tooltipRect.y.toString() + \" \" + (tooltipRect.x + 22).toString() + \",\" + tooltipRect.y.toString();\n    const bottomLeft = (tooltipRect.x + tooltipRect.w - 8).toString() + \",\" + (tooltipRect.y - 10).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 25).toString() + \",\" + tooltipRect.y.toString() + \" \" + (tooltipRect.x + tooltipRect.w - 15).toString() + \",\" + tooltipRect.y.toString();\n    const topRight = (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h + 10).toString() + \" \" + (tooltipRect.x + 15).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString() + \" \" + (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString();\n    const topLeft = (tooltipRect.x + tooltipRect.w - 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h + 10).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 15).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString();\n    const points = tooltipRect.isLeft && tooltipRect.isTop ? topLeft : tooltipRect.isTop ? topRight : tooltipRect.isLeft ? bottomLeft : bottomRight;\n    const findSpaceBeforeThreshold = (inputString, threshold)=>{\n        let i = 0;\n        let temp = -1;\n        if (inputString.length <= threshold) {\n            return [\n                \"\",\n                inputString\n            ];\n        }\n        while(i <= inputString.length && i <= threshold){\n            if (inputString[i] === \" \") {\n                temp = i;\n            }\n            i++;\n        }\n        return temp !== -1 ? [\n            inputString.slice(0, temp),\n            inputString.slice(temp + 1)\n        ] : [\n            inputString.slice(0, threshold),\n            inputString.slice(threshold + 1)\n        ];\n    };\n    const tips = [];\n    const startTip = findSpaceBeforeThreshold(props.tip, 35 - (1 * fontSize - 11));\n    tips.push(startTip[0]);\n    let interimTip = startTip[1];\n    let leftover = startTip[1];\n    while(interimTip !== \"\"){\n        const currTip = findSpaceBeforeThreshold(interimTip === leftover ? interimTip : leftover, 35 - (1 * fontSize - 11));\n        interimTip = currTip[0];\n        leftover = currTip[1];\n        tips.push(interimTip === \"\" ? currTip[1] : currTip[0]);\n    }\n    return react_1.default.createElement(\"g\", {\n        pointerEvents: \"none\"\n    }, react_1.default.createElement(\"rect\", {\n        x: tooltipRect.x,\n        y: tooltipRect.y,\n        width: tooltipRect.w,\n        rx: 5,\n        ry: 5,\n        height: tooltipRect.h,\n        fill: bgColor,\n        visibility: hidden ? \"hidden\" : \"visible\"\n    }), react_1.default.createElement(\"polygon\", {\n        fill: bgColor,\n        visibility: hidden ? \"hidden\" : \"visible\",\n        points: points\n    }), react_1.default.createElement(\"text\", {\n        ref: textRef,\n        x: rtl ? tooltipRect.x + tooltipRect.w - 10 : tooltipRect.x + 10,\n        y: tooltipRect.y,\n        cursor: \"default\",\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        fill: textColor,\n        visibility: hidden ? \"hidden\" : \"visible\"\n    }, props.tip.length > 35 - 1 * (fontSize - 11) ? tips.map((tip, index)=>{\n        return react_1.default.createElement(\"tspan\", {\n            key: tip,\n            x: rtl ? tooltipRect.x + tooltipRect.w - 10 : tooltipRect.x + 10,\n            y: tooltipRect.y + (20 + (1 * fontSize - 11)) + 20 * index\n        }, tip);\n    }) : react_1.default.createElement(\"tspan\", {\n        x: rtl ? tooltipRect.x + tooltipRect.w - 10 : tooltipRect.x + 10,\n        y: tooltipRect.y + (20 + (1 * fontSize - 11))\n    }, props.tip)));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-path-tooltip/dist/ReactPathTooltip.js\n");

/***/ })

};
;